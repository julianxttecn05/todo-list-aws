pipeline {
    agent none  // El pipeline se ejecutará en distintos agentes en cada etapa

    stages {
        // Etapa 1: Clonar el código en el servidor Jenkins principal (master)
        stage('Get Code') {
            agent {
                label 'master'
            }
            steps {
                checkout scm  // Clonar el repositorio en la rama configurada
                script {
                    sh '''
                    whoami   # Muestra el usuario ejecutando la tarea
                    hostname # Muestra el nombre del host
                    '''
                }
            }
        }

        // Etapa 2: Pruebas estáticas de código con Flake8 y Bandit
        stage('Static Test') {
            agent {
                label 'agent2'  // Se ejecuta en el agente 2
            }
            steps {
                script {
                    sh '''
                    whoami
                    hostname
                    cd src
                    pip install --user flake8 bandit  # Instalar herramientas de análisis estático
                    export PATH=/home/ubuntu/.local/bin:$PATH
                    python -m flake8 --exit-zero --format=pylint .  # Revisar estilo de código
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template {abspath}:{line}: [{test_id}] {msg}  # Análisis de seguridad
                    '''
                }
            }
            post {
                always {
                    recordIssues(
                        tools: [flake8(pattern: '**/flake8.out'), bandit(pattern: '**/bandit.out')]
                    )  // Guardar los resultados de los análisis estáticos
                }
            }
        }

        // Etapa 3: Construcción de la aplicación con AWS SAM
        stage('Build') {
            agent {
                label 'master'
            }
            steps {
                script {
                    sh '''
                    whoami
                    hostname
                    sam build  # Construir el paquete de despliegue para AWS Lambda
                    '''
                }
            }
        }

        // Etapa 4: Desplegar la aplicación en AWS utilizando SAM
        stage('Deploy') {
            agent {
                label 'master'
            }
            steps {
                script {
                    sh '''
                    whoami
                    hostname
                    sam deploy --config-env staging --no-confirm-changeset --s3-bucket cp1-d-julian-sanchez-alcazar  # Desplegar en AWS
                    '''
                }
            }
        }

        // Etapa 5: Obtener la URL base de la API desde AWS CloudFormation
        stage('Set API URL') {
            agent {
                label 'master'
            }
            steps {
                script {
                    def baseUrl = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue --region us-east-1 --output text", returnStdout: true).trim()
                    echo "BASE_URL: ${baseUrl}"
                    writeFile file: 'BASE_URL.txt', text: baseUrl
                    stash includes: 'BASE_URL.txt', name: 'api_url'  // Guardar la URL para la siguiente etapa
                }
            }
        }

        // Etapa 6: Pruebas de integración de la API REST
        stage('Rest Test') {
            agent {
                label 'agent3'  // Se ejecuta en el agente 3
            }
            steps {
                script {
                    unstash 'api_url'  // Recuperar la URL de la API
                    def baseUrl = readFile('BASE_URL.txt').trim()
                    echo "Using BASE_URL: ${baseUrl}"
                    sh '''
                    cat BASE_URL.txt
                    export BASE_URL=$(cat BASE_URL.txt)
                    echo "BASE_URL: $BASE_URL"
                    pytest test/integration/todoApiTest.py --junitxml=pytest-integration-report.xml | tee pytest_output.log  # Ejecutar pruebas de integración
                    '''
                    stash includes: 'pytest-integration-report.xml, pytest_output.log', name: 'test_results'  // Guardar resultados de las pruebas
                }
            }
        }

        // Etapa 7: Promocionar el código a producción (merge develop -> master)
        stage('Promote') {
            agent {
                label 'agent3'  // Se ejecuta en el agente 3
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'unirCP1b', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                        cd /home/ubuntu/jenkins-agents/agent3/workspace/JenkinsEC2/CICD_agentes
                        git config --global user.email "jenkins@yourcompany.com"
                        git config --global user.name "Jenkins CI"

                        # Cambiar a la rama master y fusionar develop
                        git checkout master
                        git pull origin master
                        git merge --no-ff origin/develop -m "Promoting develop to master for release"

                        # Crear un archivo de versión y hacer commit
                        date > release.txt
                        git add release.txt
                        git commit -m "Marking this version as release"

                        # Configurar credenciales para el push seguro
                        export GIT_ASKPASS=/tmp/git-askpass.sh
                        echo '#!/bin/sh' > $GIT_ASKPASS
                        echo 'echo $GIT_PASSWORD' >> $GIT_ASKPASS
                        chmod +x $GIT_ASKPASS
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/julianxttecn05/todo-list-aws.git master  # Subir cambios a GitHub
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/*.xml', fingerprint: true  // Guardar archivos generados en la ejecución
            junit '**/pytest-integration-report.xml'  // Publicar resultados de pruebas
        }
        failure {
            echo 'Pipeline Failed! Please check the logs.'  // Mensaje en caso de fallo
        }
    }
}

