pipeline {
    agent any

    environment {
        BASE_URL = ''  // Definir variable globalmente
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Set API URL') {
            steps {
                script {
                    def url = sh(script: '''
                    aws cloudformation describe-stacks --stack-name todo-list-aws-staging \
                    --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \
                    --region us-east-1 --output text
                    ''', returnStdout: true).trim()

                    if (url == null || url == '' || url == 'None') {
                        error "BASE_URL no pudo ser asignado correctamente."
                    }

                    env.BASE_URL = url  // Asignar BASE_URL como variable de entorno global
                    echo "‚úÖ BASE_URL asignado correctamente: ${env.BASE_URL}"
                }
            }
        }

        stage('Integration Tests') {
            agent { label 'agent3' }
            environment {
                BASE_URL = "${env.BASE_URL}"  // Pasar BASE_URL a esta etapa
            }
            steps {
                script {
                    sh '''
                    echo "üöÄ Ejecutando pruebas de integraci√≥n..."
                    mkdir -p test/integration
                    cd test/integration

                    echo "BASE_URL: ${BASE_URL}"

                    pytest todoApiTest.py --junitxml=pytest-integration-report.xml | tee pytest_output.log
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                sh '''
                echo "üìù Verificando archivos generados..."
                ls -lah test/integration/
                '''
            }
            archiveArtifacts artifacts: 'test/integration/pytest-integration-report.xml', fingerprint: true
            junit 'test/integration/pytest-integration-report.xml'
        }
        failure {
            echo '‚ùå Pipeline Failed! Please check the logs.'
        }
        success {
            echo '‚úÖ Pipeline Completed Successfully!'
        }
    }
}

