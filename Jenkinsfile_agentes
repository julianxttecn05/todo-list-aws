pipeline {
    agent any

    environment {
        BASE_URL = ''
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Static Test') {
            agent { label 'agent2' }
            steps {
                script {
                    sh '''
                    echo "Ejecutando pruebas estáticas..."
                    cd src
                    pip install --user flake8 bandit
                    python -m flake8 --exit-zero --format=pylint .
                    bandit --exit-zero -r . -f txt -o bandit.out
                    '''
                }
                recordIssues tools: [flake8(pattern: '**/flake8.out')]
                archiveArtifacts artifacts: 'src/bandit.out', fingerprint: true
            }
        }

        stage('Build') {
            steps {
                script {
                    sh '''
                    echo "Construyendo aplicación con SAM..."
                    sam build
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh '''
                    echo "Desplegando en AWS con SAM..."
                    sam deploy --config-env staging --no-confirm-changeset --s3-bucket cp1-d-julian-sanchez-alcazar
                    '''
                }
            }
        }

        stage('Set API URL') {
            steps {
                script {
                    BASE_URL = sh(script: '''
                    aws cloudformation describe-stacks --stack-name todo-list-aws-staging \
                    --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \
                    --region us-east-1 --output text
                    ''', returnStdout: true).trim()

                    echo "BASE_URL asignado correctamente: ${BASE_URL}"
                }
            }
        }

        stage('Integration Tests') {
            agent { label 'agent3' }
            steps {
                script {
                    sh '''
                    echo "Ejecutando pruebas de integración..."
                    mkdir -p test/integration
                    cd test/integration
                    pytest todoApiTest.py --junitxml=pytest-integration-report.xml | tee pytest_output.log
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                sh '''
                echo "Verificando archivos generados..."
                ls -lah test/integration/
                '''
            }
            archiveArtifacts artifacts: 'test/integration/pytest-integration-report.xml', fingerprint: true
            junit 'test/integration/pytest-integration-report.xml'
        }
        failure {
            echo '❌ Pipeline Failed! Please check the logs.'
        }
        success {
            echo '✅ Pipeline Completed Successfully!'
        }
    }
}

