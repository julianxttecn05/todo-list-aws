pipeline {
    agent none  // Cada etapa elige su propio agente

    stages {
        // Etapa 1: Obtener código fuente
        stage('Get Code') {
            agent { label 'master' }
            steps {
                checkout scm
                script {
                    sh '''
                    whoami
                    hostname
                    '''
                }
            }
        }

        // Etapa 2: Pruebas estáticas (Linting & Seguridad)
        stage('Static Test') {
            agent { label 'agent2' }
            steps {
                script {
                    sh '''
                    whoami
                    hostname
                    cd src
                    pip install --user flake8 bandit
                    export PATH=/home/ubuntu/.local/bin:$PATH
                    python -m flake8 --exit-zero --format=pylint . > flake8.out
                    bandit --exit-zero -r . -f json -o bandit.out
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/flake8.out, **/bandit.out', fingerprint: true
                }
            }
        }

        // Etapa 3: Construcción de la aplicación
        stage('Build') {
            agent { label 'master' }
            steps {
                script {
                    sh '''
                    whoami
                    hostname
                    sam build
                    '''
                }
            }
        }

        // Etapa 4: Desplegar la aplicación en AWS
        stage('Deploy') {
            agent { label 'master' }
            steps {
                script {
                    sh '''
                    whoami
                    hostname
                    sam deploy --config-env staging --no-confirm-changeset --s3-bucket cp1-d-julian-sanchez-alcazar
                    '''
                }
            }
        }

        // Etapa 5: Obtener la URL de la API desplegada
        stage('Set API URL') {
            agent { label 'master' }
            steps {
                script {
                    def baseUrl = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text", returnStdout: true).trim()
                    
                    if (baseUrl) {
                        echo "BASE_URL: ${baseUrl}"
                        writeFile file: 'BASE_URL.txt', text: baseUrl
                        stash includes: 'BASE_URL.txt', name: 'api_url'
                    } else {
                        error "No se pudo obtener la URL de la API desde AWS CloudFormation."
                    }
                }
            }
        }

        // Etapa 6: Pruebas de integración con la API
        stage('Rest Test') {
            agent { label 'agent3' }
            steps {
                script {
                    unstash 'api_url'
                    def baseUrl = readFile('BASE_URL.txt').trim()
                    
                    if (!baseUrl || baseUrl.length() < 10) {
                        error "La URL de la API no está configurada correctamente."
                    }

                    echo "Using BASE_URL: ${baseUrl}"
                    sh '''
                    export BASE_URL=$(cat BASE_URL.txt)
                    pytest test/integration/todoApiTest.py --junitxml=pytest-integration-report.xml | tee pytest_output.log
                    '''
                    stash includes: 'pytest-integration-report.xml, pytest_output.log', name: 'test_results'
                }
            }
        }

        // Etapa 7: Promocionar a Producción
        stage('Promote') {
            agent { label 'agent3' }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'unirCP1b', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                        cd /home/ubuntu/jenkins-agents/agent3/workspace/JenkinsEC2/CICD_agentes
                        git config --global user.email "jenkins@yourcompany.com"
                        git config --global user.name "Jenkins CI"

                        # Asegurarse de que la rama develop está presente localmente
                        git fetch origin develop
                        git checkout master
                        git pull origin master

                        if git show-ref --verify --quiet refs/remotes/origin/develop; then
                            git merge --no-ff origin/develop -m "Promoting develop to master for release"
                            date > release.txt
                            git add release.txt
                            git commit -m "Marcando esta versión como release"
                            
                            # Configurar credenciales para realizar push
                            export GIT_ASKPASS=/tmp/git-askpass.sh
                            echo '#!/bin/sh' > $GIT_ASKPASS
                            echo 'echo $GIT_PASSWORD' >> $GIT_ASKPASS
                            chmod +x $GIT_ASKPASS
                            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/julianxttecn05/todo-list-aws.git master
                        else
                            echo "Error: La rama 'develop' no está disponible para fusionar."
                            exit 1
                        fi
                        '''
                    }
                }
            }
        }
    }

    // Post Actions: Guardar reportes de pruebas
    post {
        always {
            node('master') {  // Aseguramos que se ejecuta en un nodo válido
                archiveArtifacts artifacts: '**/*.xml', fingerprint: true
                junit '**/pytest-integration-report.xml'
            }
        }
        failure {
            echo 'Pipeline Failed! Revisa los logs.'
        }
    }
}

