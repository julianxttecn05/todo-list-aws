pipeline {
    agent any

    environment {
        BASE_URL = ""
    }

    stages {
        // Stage 1: Obtener el Código Fuente desde develop
        stage('Get Code') {
            agent { label 'master' }
            steps {
                script {
                    sh 'whoami'
                    sh 'hostname'
                    git branch: 'develop', credentialsId: 'unirCP1b', url: 'https://github.com/julianxttecn05/todo-list-aws.git'
                }
            }
        }

        // Stage 2: Pruebas de Análisis Estático (Flake8 y Bandit)
        stage('Static Test') {
            agent { label 'agent2' }
            steps {
                script {
                    sh 'whoami'
                    sh 'hostname'
                    sh '''
                    cd src
                    pip install --user flake8 bandit
                    export PATH=$PATH:$HOME/.local/bin  # Agregar Bandit al PATH
                    python -m flake8 --exit-zero --format=pylint . > flake8.out
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
                }
                recordIssues tools: [flake8(name: 'Flake8', pattern: '**/flake8.out')]
                recordIssues tools: [pyLint(name: 'Bandit', pattern: '**/bandit.out')]
            }
        }

        // Stage 3: Construcción del Artefacto
        stage('Build') {
            agent { label 'master' }
            steps {
                sh 'whoami'
                sh 'hostname'
                sh 'sam build'
            }
        }

        // Stage 4: Despliegue en Staging
        stage('Deploy to Staging') {
            agent { label 'master' }
            steps {
                sh 'whoami'
                sh 'hostname'
                sh 'sam deploy --config-env staging --no-confirm-changeset --s3-bucket cp1-d-julian-sanchez-alcazar'
            }
        }

        // Stage 5: Obtener la URL de Staging
        stage('Set API URL') {
            agent { label 'master' }
            steps {
                script {
                    sh 'whoami'
                    sh 'hostname'
                    BASE_URL = sh(script: '''
                        aws cloudformation describe-stacks --stack-name todo-list-aws-staging \
                        --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \
                        --region us-east-1 --output text
                    ''', returnStdout: true).trim()
                    echo "BASE_URL: ${BASE_URL}"
                    writeFile file: 'BASE_URL.txt', text: BASE_URL
                    stash name: 'api-url', includes: 'BASE_URL.txt'
                }
            }
        }

        // Stage 6: Pruebas de Integración (Paralelización solo en la obtención del reporte)
        stage('Rest Test') {
            agent { label 'agent3' }
            steps {
                script {
                    sh 'whoami'
                    sh 'hostname'
                    unstash 'api-url'
                    BASE_URL = readFile('BASE_URL.txt').trim()
                    echo "Using BASE_URL: $BASE_URL"

                    // Ejecutar las pruebas en segundo plano con nohup
                    sh '''
                    export BASE_URL=$(cat BASE_URL.txt)
                    echo "BASE_URL: $BASE_URL"

                    nohup pytest test/integration/todoApiTest.py --junitxml=pytest-integration-report.xml > pytest_output.log 2>&1 &
                    echo $! > pytest_pid.txt
                    '''
                }
            }
        }
    }

    post {
        always {
            // Esperar la finalización de pytest antes de recolectar reportes
            script {
                sh '''
                if [ -f pytest_pid.txt ]; then
                    echo "Esperando que pytest termine..."
                    tail --pid=$(cat pytest_pid.txt) -f /dev/null
                fi
                echo "Recolectando reportes..."
                cat pytest_output.log || true
                '''
            }
            archiveArtifacts artifacts: '**/*.xml', fingerprint: true
            junit '**/pytest-integration-report.xml'
        }
        failure {
            echo 'Pipeline Failed! Please check the logs.'
        }
    }
}

