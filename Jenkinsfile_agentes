pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/julianxttecn05/todo-list-aws.git'
        GIT_CREDENTIALS = 'unirCP1b'
        AWS_REGION = 'us-east-1'
        S3_BUCKET = 'cp1-d-julian-sanchez-alcazar'
        STACK_NAME = 'todo-list-aws-staging'
    }

    stages {
        stage('Get Code') {
            agent { label 'agent1' }
            steps {
                checkout scm
            }
        }

        stage('Static Test') {
            agent { label 'agent2' }
            steps {
                script {
                    sh '''
                    cd src
                    pip install --user flake8 bandit
                    export PATH=/home/ubuntu/.local/bin:$PATH
                    python -m flake8 --exit-zero --format=pylint .
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
                }
                recordIssues tools: [flake8(pattern: '**/flake8.out'), bandit(pattern: '**/bandit.out')]
            }
        }

        stage('Build') {
            agent { label 'agent1' }
            steps {
                script {
                    sh 'sam build'
                }
            }
        }

        stage('Deploy') {
            agent { label 'agent1' }
            steps {
                script {
                    sh '''
                    sam deploy --config-env staging --no-confirm-changeset --s3-bucket $S3_BUCKET
                    '''
                }
            }
        }

        stage('Set API URL') {
            agent { label 'agent1' }
            steps {
                script {
                    def apiUrl = sh(script: '''
                        aws cloudformation describe-stacks --stack-name $STACK_NAME \
                        --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" \
                        --region $AWS_REGION --output text
                    ''', returnStdout: true).trim()
                    echo "BASE_URL: ${apiUrl}"
                    writeFile file: 'BASE_URL.txt', text: apiUrl
                    stash includes: 'BASE_URL.txt', name: 'api-url'
                }
            }
        }

        stage('Rest Test') {
            agent { label 'agent3' }
            steps {
                script {
                    unstash 'api-url'
                    def apiUrl = readFile('BASE_URL.txt').trim()
                    echo "Using BASE_URL: ${apiUrl}"
                    sh '''
                    export BASE_URL=$(cat BASE_URL.txt)
                    pytest test/integration/todoApiTest.py --junitxml=pytest-integration-report.xml | tee pytest_output.log
                    '''
                    stash includes: 'pytest-integration-report.xml', name: 'test-results'
                }
            }
        }

        stage('Promote') {
            agent { label 'agent3' }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'unirCP1b', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                        cd /home/ubuntu/jenkins-agents/agent3/workspace/JenkinsEC2/CICD_agentes

                        # Configurar identidad de Git
                        git config --global user.email "jenkins@yourcompany.com"
                        git config --global user.name "Jenkins CI"

                        # Asegurar que tenemos la última versión de `develop`
                        git fetch origin develop

                        # Asegurar que la rama `master` está actualizada
                        git checkout master
                        git pull origin master

                        # Crear rama `develop` local si no existe
                        git checkout -B develop origin/develop

                        # Fusionar `develop` en `master`
                        git merge --no-ff develop -m "Promoting develop to master for release"

                        # Crear un archivo de release para marcar la versión
                        date > release.txt
                        git add release.txt
                        git commit -m "Marking this version as release"

                        # Configurar credenciales para el push
                        export GIT_ASKPASS=/tmp/git-askpass.sh
                        echo '#!/bin/sh' > $GIT_ASKPASS
                        echo 'echo $GIT_PASSWORD' >> $GIT_ASKPASS
                        chmod +x $GIT_ASKPASS

                        # Empujar cambios a `master`
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/julianxttecn05/todo-list-aws.git master
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/*.xml', fingerprint: true
            junit '**/pytest-integration-report.xml'
        }
        failure {
            echo 'Pipeline Failed! Please check the logs.'
        }
    }
}

